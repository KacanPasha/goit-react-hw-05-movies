{"version":3,"file":"static/js/97.d13ed496.chunk.js","mappings":"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","sources":["api/Api.js","pages/castPage/CastPage.styled.js","pages/castPage/CastPage.js","pages/movieCardPage/MovieCardPage.styled.js","pages/movieCardPage/MovieKardCage.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'db6e6625e26b450a55d1e6974d660ebb';\nconst URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `${URL}search/movie?api_key=${API_KEY}&query=${query}&include_adult=false&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async id => {\n  const response = await axios.get(\n    `${URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getReviews = async id => {\n  const response = await axios.get(\n    `${URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: block;\n  list-style-type: none;\n  text-align: left;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'api/Api';\nimport stubImage from '../../images/stub.jpg';\nimport { List } from './CastPage.styled';\nimport MovieCard from 'pages/movieCardPage/MovieKardCage';\n\nexport default function CardPage() {\n  const { id } = useParams();\n  const [films, setFilm] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const movieDetails = await getCast(id);\n        setFilm(movieDetails);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      }\n    };\n\n    fetchCast();\n  }, [id]);\n  console.log(films);\n\n  return (\n    <div>\n     <MovieCard />\n\n      <List>\n        {films && films.cast && Array.isArray(films.cast) && films.cast.length > 0 ? (\n          films.cast.map(e => (\n            <li key={e.id}>\n              {e.profile_path ? (\n                <img\n                  width=\"300px\"\n                  height=\"450px\"\n                  src={`https://image.tmdb.org/t/p/w300/${e.profile_path}`}\n                  alt={e.name}\n                />\n              ) : (\n                <img\n                  width=\"300px\"\n                  height=\"300px\"\n                  src={stubImage}\n                  alt=\"No_Photo\"\n                />\n              )}\n              <h2>{e.name}</h2>\n              <p>Character: {e.character}</p>\n            </li>\n          ))\n        ) : (\n          <li>\n            {films && films.cast && films.cast.length === 0\n              ? 'Sorry, no data available.'\n              : 'No trending data available'}\n          </li>\n        )}\n      </List>\n    </div>\n  );\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nexport const Block = styled.div`\ndisplay: flex;\ntext-align: left;\nmargin:16px;\n`;\n\nexport const FilmDetails = styled.div`\nmargin:16px;\n\n\n`;\n\nexport const Btn = styled.button`\n  background-color: rgba(255, 99, 71, 0.2);\n  color: black;\n  font-size: 20px;\n  text-decoration: none;\n  margin: 16px;\n  border-radius: 10px;\n  border: none;\n  padding: 8px;\n  &:hover,\n  &:focus {\n    background-color: tomato;\n  }\n`;\n\nexport const Container = styled.div`\ndisplay: block;\ntext-align: left;\nborder-bottom: 1px solid;\nmargin: 16px;\nborder-bottom: 1px solid tomato;\n    box-shadow: 0 2px 4px rgba(255, 99, 71, 0.5);\n\n`\nexport const Title = styled.h2`\nmargin-left: 16px;`\n\nexport const LinkCastReviews = styled(Link)`\n  color: black;\n  text-decoration: none;\n  font-size: 20px;\n  list-style-type: none;\n  border-bottom: 2px solid tomato;\n \n    \n\n&:hover,\n&:focus {\n  color: tomato;\n  \n}\n`\n\nexport const List = styled.ul`\nlist-style-type: none;\nmargin: 0;\nmargin-top: 8px;\npadding: 16px;\n`;\n\nexport const ListItem = styled.li`\nmargin-top: 8px;\n`","import React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'api/Api';\nimport stubImage from '../../images/stub.jpg';\nimport {\n  Block,\n  Btn,\n  Container,\n  FilmDetails,\n  LinkCastReviews,\n  List,\n  ListItem,\n  Title,\n} from './MovieCardPage.styled';\n\nexport default function MovieCard() {\n  const { id } = useParams();\n  const [film, setFilm] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const movieDetails = await getMovieDetails(id);\n        setFilm(movieDetails);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [id]);\n\n  const location = useLocation()\n  return (\n    <div>\n      <Container>\n        <Link to={location.state?.from || '/'}>\n          <Btn type=\"button\">&larr; Go back</Btn>\n        </Link>\n\n        {film ? (\n          <div>\n            <Block>\n              <div>\n                {film.poster_path ? (\n                  <img\n                    width=\"300px\"\n                    height=\"450px\"\n                    src={`https://image.tmdb.org/t/p/w300/${film.poster_path}`}\n                    alt={film.title}\n                  />\n                ) : (\n                  <img\n                    width=\"300px\"\n                    height=\"300px\"\n                    src={stubImage}\n                    alt=\"No_Photo\"\n                  />\n                )}\n              </div>\n              <FilmDetails>\n                <h1>\n                  {film.title} ({film.release_date.substring(0, 4)})\n                </h1>\n                <p>User Score: {Math.round(film.vote_average * 10)}%</p>\n                <h2>Overview</h2>\n                <p>{film.overview}</p>\n                <h2>Genres:</h2>\n                <p>\n                  {film.genres.map((e, index) => {\n                    const genre = e.name;\n                    return (\n                      <span key={e.id}>\n                        {genre}\n                        {index < film.genres.length - 1 ? ', ' : ';'}\n                      </span>\n                    );\n                  })}\n                </p>\n              </FilmDetails>\n            </Block>\n          </div>\n        ) : (\n          'Loading...'\n        )}\n      </Container>\n      <Container>\n        <Title>Additional information</Title>\n        <List>\n          <ListItem>\n            <LinkCastReviews to={`/movies/${id}/cast`} state={{from: location}}>Cast</LinkCastReviews>\n          </ListItem>\n          <ListItem>\n            <LinkCastReviews to={`/movies/${id}/reviews`} state={{from: location}}>\n              Reviews\n            </LinkCastReviews>\n          </ListItem>\n        </List>\n      </Container>\n    </div>\n  );\n}\n"],"names":["API_KEY","URL","getTrending","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","concat","sent","abrupt","data","stop","apply","arguments","getMovies","_ref2","_callee2","query","_context2","_x","getMovieDetails","_ref3","_callee3","id","_context3","_x2","getCast","_ref4","_callee4","_context4","_x3","getReviews","_ref5","_callee5","_context5","_x4","List","styled","_templateObject","_taggedTemplateLiteral","CardPage","useParams","_useState","useState","_useState2","_slicedToArray","films","setFilm","useEffect","fetchCast","movieDetails","t0","console","error","log","_jsxs","children","_jsx","MovieCard","cast","Array","isArray","length","map","e","profile_path","width","height","src","alt","name","stubImage","character","Block","FilmDetails","_templateObject2","Btn","_templateObject3","Container","_templateObject4","Title","_templateObject5","LinkCastReviews","Link","_templateObject6","_templateObject7","ListItem","_templateObject8","_location$state","film","fetchMovieDetails","location","useLocation","to","state","from","type","poster_path","title","release_date","substring","Math","round","vote_average","overview","genres","index","genre"],"sourceRoot":""}